<?php

namespace Tests\Feature;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\RefreshDatabaseState;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ThreadsTest extends TestCase
{
   use DatabaseMigrations;

    protected $thread;
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory('App\Models\Thread')->create();
    }


    public function test_a_user_can_view_all_threads()
    {
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    public function test_a_user_can_read_a_single_thread(){
        $this->get($this->thread->path())
            ->assertSee($this->thread->title);

    }

//    public function test_a_user_can_read_replies_that_are_associated_with_a_thread()
//    {
//        // 如果有 Thread
//        // 并且该 Thread 有回复
//        $reply = factory('App\Models\Reply')
//            ->create(['thread_id' => $this->thread->id]);
//        // 那么当我们看 Thread 时
//        // 我们也要看到回复
//        $this->get($this->thread->path())
//            ->assertSee($reply->body);
//    }

    public function test_a_thread_has_a_creator()
    {
        $this->assertInstanceOf('App\Models\User',$this->thread->creator);
    }

    /** @test */
    public function test_a_thread_can_add_a_reply()
    {
        $this->thread->addReply([
            'body' => 'Foobar',
            'user_id' => 1
        ]);

        $this->assertCount(1,$this->thread->replies);
    }
}
